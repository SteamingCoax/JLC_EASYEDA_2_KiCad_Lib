import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout,
                            QHBoxLayout, QPushButton, QTextEdit, QLabel,
                            QFileDialog, QMessageBox)
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from jlc2kicadlib import JLCKicad

class ConversionThread(QThread):
    finished = pyqtSignal(bool, str)
    
    def __init__(self, output_dir, part_numbers):
        super().__init__()
        self.output_dir = output_dir
        self.part_numbers = part_numbers
        
    def run(self):
        try:
            converter = JLCKicad()
            converter.set_lib_path(self.output_dir)
            
            for part_number in self.part_numbers:
                if part_number.strip():
                    converter.generate_lib(part_number.strip())
            
            self.finished.emit(True, "")
        except Exception as e:
            self.finished.emit(False, str(e))

class JLCConverterApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("JLC2KiCad Converter")
        self.setMinimumSize(600, 400)
        
        # Create main widget and layout
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)
        
        # Directory selection
        dir_layout = QHBoxLayout()
        dir_label = QLabel("Output Directory:")
        self.dir_entry = QLabel("No directory selected")
        self.dir_entry.setStyleSheet("background-color: white; padding: 5px; border: 1px solid gray;")
        browse_btn = QPushButton("Browse")
        browse_btn.clicked.connect(self.browse_directory)
        
        dir_layout.addWidget(dir_label)
        dir_layout.addWidget(self.dir_entry, stretch=1)
        dir_layout.addWidget(browse_btn)
        layout.addLayout(dir_layout)
        
        # Part numbers input
        layout.addWidget(QLabel("Part Numbers:"))
        self.parts_text = QTextEdit()
        layout.addWidget(self.parts_text)
        layout.addWidget(QLabel("(One part number per line)"))
        
        # Convert button
        self.convert_btn = QPushButton("Convert")
        self.convert_btn.clicked.connect(self.start_conversion)
        layout.addWidget(self.convert_btn, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # Status label
        self.status_label = QLabel("")
        layout.addWidget(self.status_label, alignment=Qt.AlignmentFlag.AlignCenter)
        
        self.output_dir = ""
        self.conversion_thread = None
        
    def browse_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Output Directory")
        if directory:
            self.output_dir = directory
            # Show only the last part of the path if it's too long
            display_path = directory.split('/')[-1] if len(directory) > 40 else directory
            self.dir_entry.setText(display_path)
            self.dir_entry.setToolTip(directory)  # Show full path on hover
    
    def start_conversion(self):
        if not self.output_dir:
            QMessageBox.warning(self, "Error", "Please select an output directory")
            return
        
        part_numbers = self.parts_text.toPlainText().strip().split('\n')
        if not part_numbers or not part_numbers[0]:
            QMessageBox.warning(self, "Error", "Please enter at least one part number")
            return
        
        # Disable controls during conversion
        self.convert_btn.setEnabled(False)
        self.status_label.setText("Converting...")
        
        # Start conversion in a separate thread
        self.conversion_thread = ConversionThread(self.output_dir, part_numbers)
        self.conversion_thread.finished.connect(self.conversion_complete)
        self.conversion_thread.start()
    
    def conversion_complete(self, success, error_message):
        self.convert_btn.setEnabled(True)
        
        if success:
            self.status_label.setText("Conversion completed successfully!")
            QMessageBox.information(self, "Success", "Parts have been converted successfully!")
        else:
            self.status_label.setText("Error during conversion")
            QMessageBox.critical(self, "Error", f"An error occurred: {error_message}")

def main():
    app = QApplication(sys.argv)
    window = JLCConverterApp()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()